# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import hello_bili_pb2 as hello__bili__pb2


class BiliStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.HelloDewei = channel.unary_unary(
                '/test.Bili/HelloDewei',
                request_serializer=hello__bili__pb2.HelloDeweiReq.SerializeToString,
                response_deserializer=hello__bili__pb2.HelloDeweiReply.FromString,
                )
        self.HelloTest = channel.stream_stream(
                '/test.Bili/HelloTest',
                request_serializer=hello__bili__pb2.HelloTestRequest.SerializeToString,
                response_deserializer=hello__bili__pb2.HelloTestResponse.FromString,
                )
        self.TestClientRecvStream = channel.unary_stream(
                '/test.Bili/TestClientRecvStream',
                request_serializer=hello__bili__pb2.TestClientRecvStreamRequest.SerializeToString,
                response_deserializer=hello__bili__pb2.TestClientRecvStreamResponse.FromString,
                )
        self.TestClientSendStream = channel.stream_unary(
                '/test.Bili/TestClientSendStream',
                request_serializer=hello__bili__pb2.TestClientSendStreamRequest.SerializeToString,
                response_deserializer=hello__bili__pb2.TestClientSendStreamResponse.FromString,
                )
        self.TestTwoWayStream = channel.stream_stream(
                '/test.Bili/TestTwoWayStream',
                request_serializer=hello__bili__pb2.TestTwoWayStreamRequest.SerializeToString,
                response_deserializer=hello__bili__pb2.TestTwoWayStreamResponse.FromString,
                )


class BiliServicer(object):
    """Missing associated documentation comment in .proto file."""

    def HelloDewei(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HelloTest(self, request_iterator, context):
        """lesson 3
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TestClientRecvStream(self, request, context):
        """lesson 4
        客户端请求服务器（非流）
        服务器返回流
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TestClientSendStream(self, request_iterator, context):
        """lesson 5
        客户端请求服务器（非流）
        服务器返回流
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TestTwoWayStream(self, request_iterator, context):
        """lesson 6
        双向流
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BiliServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'HelloDewei': grpc.unary_unary_rpc_method_handler(
                    servicer.HelloDewei,
                    request_deserializer=hello__bili__pb2.HelloDeweiReq.FromString,
                    response_serializer=hello__bili__pb2.HelloDeweiReply.SerializeToString,
            ),
            'HelloTest': grpc.stream_stream_rpc_method_handler(
                    servicer.HelloTest,
                    request_deserializer=hello__bili__pb2.HelloTestRequest.FromString,
                    response_serializer=hello__bili__pb2.HelloTestResponse.SerializeToString,
            ),
            'TestClientRecvStream': grpc.unary_stream_rpc_method_handler(
                    servicer.TestClientRecvStream,
                    request_deserializer=hello__bili__pb2.TestClientRecvStreamRequest.FromString,
                    response_serializer=hello__bili__pb2.TestClientRecvStreamResponse.SerializeToString,
            ),
            'TestClientSendStream': grpc.stream_unary_rpc_method_handler(
                    servicer.TestClientSendStream,
                    request_deserializer=hello__bili__pb2.TestClientSendStreamRequest.FromString,
                    response_serializer=hello__bili__pb2.TestClientSendStreamResponse.SerializeToString,
            ),
            'TestTwoWayStream': grpc.stream_stream_rpc_method_handler(
                    servicer.TestTwoWayStream,
                    request_deserializer=hello__bili__pb2.TestTwoWayStreamRequest.FromString,
                    response_serializer=hello__bili__pb2.TestTwoWayStreamResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'test.Bili', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Bili(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def HelloDewei(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/test.Bili/HelloDewei',
            hello__bili__pb2.HelloDeweiReq.SerializeToString,
            hello__bili__pb2.HelloDeweiReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HelloTest(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/test.Bili/HelloTest',
            hello__bili__pb2.HelloTestRequest.SerializeToString,
            hello__bili__pb2.HelloTestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TestClientRecvStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/test.Bili/TestClientRecvStream',
            hello__bili__pb2.TestClientRecvStreamRequest.SerializeToString,
            hello__bili__pb2.TestClientRecvStreamResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TestClientSendStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/test.Bili/TestClientSendStream',
            hello__bili__pb2.TestClientSendStreamRequest.SerializeToString,
            hello__bili__pb2.TestClientSendStreamResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TestTwoWayStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/test.Bili/TestTwoWayStream',
            hello__bili__pb2.TestTwoWayStreamRequest.SerializeToString,
            hello__bili__pb2.TestTwoWayStreamResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
